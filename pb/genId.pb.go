// Code generated by protoc-gen-go. DO NOT EDIT.
// source: genId.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GenIDRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenIDRequest) Reset()         { *m = GenIDRequest{} }
func (m *GenIDRequest) String() string { return proto.CompactTextString(m) }
func (*GenIDRequest) ProtoMessage()    {}
func (*GenIDRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef4f20eb6f122921, []int{0}
}

func (m *GenIDRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenIDRequest.Unmarshal(m, b)
}
func (m *GenIDRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenIDRequest.Marshal(b, m, deterministic)
}
func (m *GenIDRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenIDRequest.Merge(m, src)
}
func (m *GenIDRequest) XXX_Size() int {
	return xxx_messageInfo_GenIDRequest.Size(m)
}
func (m *GenIDRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GenIDRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GenIDRequest proto.InternalMessageInfo

type GenIDResponse struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GenIDResponse) Reset()         { *m = GenIDResponse{} }
func (m *GenIDResponse) String() string { return proto.CompactTextString(m) }
func (*GenIDResponse) ProtoMessage()    {}
func (*GenIDResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_ef4f20eb6f122921, []int{1}
}

func (m *GenIDResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GenIDResponse.Unmarshal(m, b)
}
func (m *GenIDResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GenIDResponse.Marshal(b, m, deterministic)
}
func (m *GenIDResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GenIDResponse.Merge(m, src)
}
func (m *GenIDResponse) XXX_Size() int {
	return xxx_messageInfo_GenIDResponse.Size(m)
}
func (m *GenIDResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GenIDResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GenIDResponse proto.InternalMessageInfo

func (m *GenIDResponse) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterType((*GenIDRequest)(nil), "trungtn.grpc.GenIDRequest")
	proto.RegisterType((*GenIDResponse)(nil), "trungtn.grpc.GenIDResponse")
}

func init() {
	proto.RegisterFile("genId.proto", fileDescriptor_ef4f20eb6f122921)
}

var fileDescriptor_ef4f20eb6f122921 = []byte{
	// 165 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4e, 0x4f, 0xcd, 0xf3,
	0x4c, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x29, 0x29, 0x2a, 0xcd, 0x4b, 0x2f, 0xc9,
	0xd3, 0x4b, 0x2f, 0x2a, 0x48, 0x56, 0xe2, 0xe3, 0xe2, 0x71, 0x4f, 0xcd, 0xf3, 0x74, 0x09, 0x4a,
	0x2d, 0x2c, 0x4d, 0x2d, 0x2e, 0x51, 0x92, 0xe7, 0xe2, 0x85, 0xf2, 0x8b, 0x0b, 0xf2, 0xf3, 0x8a,
	0x53, 0x85, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x98, 0x32,
	0x53, 0x8c, 0x56, 0x33, 0x42, 0x75, 0x04, 0xa7, 0x16, 0x95, 0x65, 0x26, 0xa7, 0x0a, 0x79, 0x41,
	0x75, 0x84, 0x67, 0x96, 0x64, 0x84, 0x86, 0x7a, 0xba, 0x08, 0x49, 0xe9, 0x21, 0xdb, 0xa0, 0x87,
	0x6c, 0xbc, 0x94, 0x34, 0x56, 0x39, 0x88, 0x55, 0x4a, 0x0c, 0x42, 0xfe, 0x5c, 0x42, 0x70, 0xb3,
	0x82, 0xf3, 0xf2, 0xcb, 0xd3, 0x72, 0x12, 0xb3, 0x53, 0x29, 0x30, 0xd0, 0x89, 0x25, 0x8a, 0xa9,
	0x20, 0x29, 0x89, 0x0d, 0xec, 0x73, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x55, 0x85, 0xba,
	0xa0, 0x08, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// GenIDServiceClient is the client API for GenIDService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GenIDServiceClient interface {
	GenIDWithUUID(ctx context.Context, in *GenIDRequest, opts ...grpc.CallOption) (*GenIDResponse, error)
	GenIDWithSnowflake(ctx context.Context, in *GenIDRequest, opts ...grpc.CallOption) (*GenIDResponse, error)
}

type genIDServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGenIDServiceClient(cc grpc.ClientConnInterface) GenIDServiceClient {
	return &genIDServiceClient{cc}
}

func (c *genIDServiceClient) GenIDWithUUID(ctx context.Context, in *GenIDRequest, opts ...grpc.CallOption) (*GenIDResponse, error) {
	out := new(GenIDResponse)
	err := c.cc.Invoke(ctx, "/trungtn.grpc.GenIDService/GenIDWithUUID", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *genIDServiceClient) GenIDWithSnowflake(ctx context.Context, in *GenIDRequest, opts ...grpc.CallOption) (*GenIDResponse, error) {
	out := new(GenIDResponse)
	err := c.cc.Invoke(ctx, "/trungtn.grpc.GenIDService/GenIDWithSnowflake", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GenIDServiceServer is the server API for GenIDService service.
type GenIDServiceServer interface {
	GenIDWithUUID(context.Context, *GenIDRequest) (*GenIDResponse, error)
	GenIDWithSnowflake(context.Context, *GenIDRequest) (*GenIDResponse, error)
}

// UnimplementedGenIDServiceServer can be embedded to have forward compatible implementations.
type UnimplementedGenIDServiceServer struct {
}

func (*UnimplementedGenIDServiceServer) GenIDWithUUID(ctx context.Context, req *GenIDRequest) (*GenIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenIDWithUUID not implemented")
}
func (*UnimplementedGenIDServiceServer) GenIDWithSnowflake(ctx context.Context, req *GenIDRequest) (*GenIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenIDWithSnowflake not implemented")
}

func RegisterGenIDServiceServer(s *grpc.Server, srv GenIDServiceServer) {
	s.RegisterService(&_GenIDService_serviceDesc, srv)
}

func _GenIDService_GenIDWithUUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenIDServiceServer).GenIDWithUUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trungtn.grpc.GenIDService/GenIDWithUUID",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenIDServiceServer).GenIDWithUUID(ctx, req.(*GenIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GenIDService_GenIDWithSnowflake_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GenIDServiceServer).GenIDWithSnowflake(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/trungtn.grpc.GenIDService/GenIDWithSnowflake",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GenIDServiceServer).GenIDWithSnowflake(ctx, req.(*GenIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _GenIDService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "trungtn.grpc.GenIDService",
	HandlerType: (*GenIDServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GenIDWithUUID",
			Handler:    _GenIDService_GenIDWithUUID_Handler,
		},
		{
			MethodName: "GenIDWithSnowflake",
			Handler:    _GenIDService_GenIDWithSnowflake_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "genId.proto",
}
